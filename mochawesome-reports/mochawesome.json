{
  "stats": {
    "suites": 12,
    "tests": 13,
    "passes": 12,
    "pending": 0,
    "failures": 1,
    "start": "2017-01-30T03:53:54.359Z",
    "end": "2017-01-30T03:53:58.231Z",
    "duration": 3872,
    "testsRegistered": 13,
    "passPercent": 92.3,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Edge node manager testing",
        "suites": [
          {
            "title": "Set Configuration",
            "suites": [],
            "tests": [
              {
                "title": "userid and token should set",
                "fullTitle": "Edge node manager testing Set Configuration userid and token should set",
                "timedOut": false,
                "duration": 204,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var requestURL = createUrlFor(\"/service/conf\");\nconsole.log(\"URL = \"+requestURL);\nrequest({\n  uri: requestURL,\n  method: \"PUT\",\n  json: {\n\t\"token\": token,\n\t\"user_id\":userid\n  }\n}, function(error, response, body) {\n  console.log(body);\n  assert.isNotNull(body);\n  assert.equal(body.success, true);\n  done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "72ba1bc2-61df-47e8-9d8c-9152ddc1532f",
                "parentUUID": "f522b993-1a96-439d-9e0c-1dc3b893fe02",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/enm.js",
            "uuid": "f522b993-1a96-439d-9e0c-1dc3b893fe02",
            "fullFile": "/root/enmd/enm.js",
            "passes": [
              {
                "title": "userid and token should set",
                "fullTitle": "Edge node manager testing Set Configuration userid and token should set",
                "timedOut": false,
                "duration": 204,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var requestURL = createUrlFor(\"/service/conf\");\nconsole.log(\"URL = \"+requestURL);\nrequest({\n  uri: requestURL,\n  method: \"PUT\",\n  json: {\n\t\"token\": token,\n\t\"user_id\":userid\n  }\n}, function(error, response, body) {\n  console.log(body);\n  assert.isNotNull(body);\n  assert.equal(body.success, true);\n  done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "72ba1bc2-61df-47e8-9d8c-9152ddc1532f",
                "parentUUID": "f522b993-1a96-439d-9e0c-1dc3b893fe02",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 204
          },
          {
            "title": "Get Configuration",
            "suites": [],
            "tests": [
              {
                "title": "userid and token should get and compare with set values",
                "fullTitle": "Edge node manager testing Get Configuration userid and token should get and compare with set values",
                "timedOut": false,
                "duration": 37,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var requestURL = createUrlFor(\"/service/conf\");\nconsole.log(\"URL = \"+requestURL);\nrequest({\n  uri: requestURL,\n  method: \"GET\"\n}, function(error, response, body) {\n\tconsole.log(body);\n\tvar response = JSON.parse(body);\n\tassert.equal(response.user_id , userid);\n\tassert.equal(response.token , token);\n\tdone();\n\t\n});",
                "err": {},
                "isRoot": false,
                "uuid": "a885d911-d2e3-43b0-b934-01599384362c",
                "parentUUID": "3de9ddf2-4cf2-48b1-b5e6-e6332683a96c",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/enm.js",
            "uuid": "3de9ddf2-4cf2-48b1-b5e6-e6332683a96c",
            "fullFile": "/root/enmd/enm.js",
            "passes": [
              {
                "title": "userid and token should get and compare with set values",
                "fullTitle": "Edge node manager testing Get Configuration userid and token should get and compare with set values",
                "timedOut": false,
                "duration": 37,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var requestURL = createUrlFor(\"/service/conf\");\nconsole.log(\"URL = \"+requestURL);\nrequest({\n  uri: requestURL,\n  method: \"GET\"\n}, function(error, response, body) {\n\tconsole.log(body);\n\tvar response = JSON.parse(body);\n\tassert.equal(response.user_id , userid);\n\tassert.equal(response.token , token);\n\tdone();\n\t\n});",
                "err": {},
                "isRoot": false,
                "uuid": "a885d911-d2e3-43b0-b934-01599384362c",
                "parentUUID": "3de9ddf2-4cf2-48b1-b5e6-e6332683a96c",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 37
          },
          {
            "title": "Set Discovery",
            "suites": [],
            "tests": [
              {
                "title": "Set discovery to true",
                "fullTitle": "Edge node manager testing Set Discovery Set discovery to true",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var requestURL = createUrlFor(\"/service\");\nconsole.log(\"URL = \"+requestURL);\nrequest({\n  uri: requestURL,\n  method: \"PUT\",\n  json: {\n\t\"DiscoveryStarted\": true\n  }\n}, function(error, response, body) {\n\tconsole.log(body);\n\tassert.equal(body.discoverystarted , true);\n\tdone();  \n});",
                "err": {},
                "isRoot": false,
                "uuid": "899eab3b-9b50-4d9a-a29a-83c4ee5a81cb",
                "parentUUID": "856a2d2d-694f-49cb-a160-d60574abd088",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/enm.js",
            "uuid": "856a2d2d-694f-49cb-a160-d60574abd088",
            "fullFile": "/root/enmd/enm.js",
            "passes": [
              {
                "title": "Set discovery to true",
                "fullTitle": "Edge node manager testing Set Discovery Set discovery to true",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var requestURL = createUrlFor(\"/service\");\nconsole.log(\"URL = \"+requestURL);\nrequest({\n  uri: requestURL,\n  method: \"PUT\",\n  json: {\n\t\"DiscoveryStarted\": true\n  }\n}, function(error, response, body) {\n\tconsole.log(body);\n\tassert.equal(body.discoverystarted , true);\n\tdone();  \n});",
                "err": {},
                "isRoot": false,
                "uuid": "899eab3b-9b50-4d9a-a29a-83c4ee5a81cb",
                "parentUUID": "856a2d2d-694f-49cb-a160-d60574abd088",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 17
          },
          {
            "title": "Get Discovery",
            "suites": [],
            "tests": [
              {
                "title": "Get discovery",
                "fullTitle": "Edge node manager testing Get Discovery Get discovery",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var requestURL = createUrlFor(\"/service\");\nconsole.log(\"URL = \"+requestURL);\nrequest({\n  uri: requestURL,\n  method: \"GET\"\n}, function(error, response, body) {\n\tvar json=JSON.parse(body);\n \t\t\t\tassert.equal(json.discoverystarted,true);\n\tdone();  \n});",
                "err": {},
                "isRoot": false,
                "uuid": "0e110870-e209-48a0-8ae6-4f26d496cd02",
                "parentUUID": "6978cc0c-fd67-47cf-90f3-32429f914f64",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/enm.js",
            "uuid": "6978cc0c-fd67-47cf-90f3-32429f914f64",
            "fullFile": "/root/enmd/enm.js",
            "passes": [
              {
                "title": "Get discovery",
                "fullTitle": "Edge node manager testing Get Discovery Get discovery",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var requestURL = createUrlFor(\"/service\");\nconsole.log(\"URL = \"+requestURL);\nrequest({\n  uri: requestURL,\n  method: \"GET\"\n}, function(error, response, body) {\n\tvar json=JSON.parse(body);\n \t\t\t\tassert.equal(json.discoverystarted,true);\n\tdone();  \n});",
                "err": {},
                "isRoot": false,
                "uuid": "0e110870-e209-48a0-8ae6-4f26d496cd02",
                "parentUUID": "6978cc0c-fd67-47cf-90f3-32429f914f64",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 11
          },
          {
            "title": "Get all edge node devices",
            "suites": [],
            "tests": [
              {
                "title": "Get all edge node devices and check is there are any A0 family",
                "fullTitle": "Edge node manager testing Get all edge node devices Get all edge node devices and check is there are any A0 family",
                "timedOut": false,
                "duration": 23,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var requestURL = createUrlFor(\"/devices\");\nconsole.log(\"URL = \"+requestURL);\nrequest({\n  uri: requestURL,\n  method: \"GET\"\n}, function(error, response, body) {\n\tbody = JSON.parse(body);\n\tconsole.log(body);\t\t\t\t\n\t\n\tassert.isNotNull(body);\n\tfor(var i=0;i< body.length;i++)\n\t{\n\t\tvar device = body[i];\n\t\tconsole.log(\"\\n device \"+i+\" details = \"+ JSON.stringify(device));\t\t\t\t\t\n\t\tif(device.hardware.modelnum == model_number && device.status.state == \"Online\"){\n\t\t\tonlineDeviceList[i] = device;\n\t\t}\n\t}\n\tassert.equal(onlineDeviceList.length>0, true);\n\tdone();\t\n});",
                "err": {},
                "isRoot": false,
                "uuid": "edead2b9-929d-41c4-9368-f769fc052050",
                "parentUUID": "2ebf1946-9e94-4fe8-af1e-bb68a23eb21b",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/enm.js",
            "uuid": "2ebf1946-9e94-4fe8-af1e-bb68a23eb21b",
            "fullFile": "/root/enmd/enm.js",
            "passes": [
              {
                "title": "Get all edge node devices and check is there are any A0 family",
                "fullTitle": "Edge node manager testing Get all edge node devices Get all edge node devices and check is there are any A0 family",
                "timedOut": false,
                "duration": 23,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var requestURL = createUrlFor(\"/devices\");\nconsole.log(\"URL = \"+requestURL);\nrequest({\n  uri: requestURL,\n  method: \"GET\"\n}, function(error, response, body) {\n\tbody = JSON.parse(body);\n\tconsole.log(body);\t\t\t\t\n\t\n\tassert.isNotNull(body);\n\tfor(var i=0;i< body.length;i++)\n\t{\n\t\tvar device = body[i];\n\t\tconsole.log(\"\\n device \"+i+\" details = \"+ JSON.stringify(device));\t\t\t\t\t\n\t\tif(device.hardware.modelnum == model_number && device.status.state == \"Online\"){\n\t\t\tonlineDeviceList[i] = device;\n\t\t}\n\t}\n\tassert.equal(onlineDeviceList.length>0, true);\n\tdone();\t\n});",
                "err": {},
                "isRoot": false,
                "uuid": "edead2b9-929d-41c4-9368-f769fc052050",
                "parentUUID": "2ebf1946-9e94-4fe8-af1e-bb68a23eb21b",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 23
          },
          {
            "title": "getFirmwareVersionForUUID",
            "suites": [],
            "tests": [
              {
                "title": "getFirmwareVersionForUUID",
                "fullTitle": "Edge node manager testing getFirmwareVersionForUUID getFirmwareVersionForUUID",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/devices\");\n\t\t    requestURL = requestURL +\"/\"+ uuid + \"/firmware\"\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n              uri: requestURL,\n              method: \"GET\"\n            }, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body); \n                    done();\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "785b15eb-8bfe-4819-8559-ed2df488480c",
                "parentUUID": "73283d59-b603-405a-adee-c68b3e151bb2",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/enm.js",
            "uuid": "73283d59-b603-405a-adee-c68b3e151bb2",
            "fullFile": "/root/enmd/enm.js",
            "passes": [
              {
                "title": "getFirmwareVersionForUUID",
                "fullTitle": "Edge node manager testing getFirmwareVersionForUUID getFirmwareVersionForUUID",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/devices\");\n\t\t    requestURL = requestURL +\"/\"+ uuid + \"/firmware\"\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n              uri: requestURL,\n              method: \"GET\"\n            }, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body); \n                    done();\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "785b15eb-8bfe-4819-8559-ed2df488480c",
                "parentUUID": "73283d59-b603-405a-adee-c68b3e151bb2",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 11
          },
          {
            "title": "registerDevice",
            "suites": [],
            "tests": [
              {
                "title": "registerDevice",
                "fullTitle": "Edge node manager testing registerDevice registerDevice",
                "timedOut": true,
                "duration": 2010,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "console.log(\"name = \"+name);\nconsole.log(\"uuid = \"+uuid);\nvar requestURL = createUrlFor(\"/service/AKCProvision\");\nconsole.log(\"URL = \"+requestURL);\nrequest({\n\t            uri: requestURL,\n\tmethod: \"POST\",\n\t            json: {\n\t\t\"uuid\": uuid,\n\t\t\"dtid\": dtid,\n\t\t\"name\": name\n\t}\n\t                \n\t            }, function(error, response, body) {\n\t\tconsole.log(body);\n\t\tassert.isNotNull(body);\n\t    assert.equal(body.success, true);\n\t    done();\n    });",
                "err": {
                  "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves."
                },
                "isRoot": false,
                "uuid": "3818d76c-55f7-4f0e-b028-a3feb8161a94",
                "parentUUID": "63354843-631c-4ac5-a2c3-235540784354",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/enm.js",
            "uuid": "63354843-631c-4ac5-a2c3-235540784354",
            "fullFile": "/root/enmd/enm.js",
            "passes": [],
            "failures": [
              {
                "title": "registerDevice",
                "fullTitle": "Edge node manager testing registerDevice registerDevice",
                "timedOut": true,
                "duration": 2010,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "console.log(\"name = \"+name);\nconsole.log(\"uuid = \"+uuid);\nvar requestURL = createUrlFor(\"/service/AKCProvision\");\nconsole.log(\"URL = \"+requestURL);\nrequest({\n\t            uri: requestURL,\n\tmethod: \"POST\",\n\t            json: {\n\t\t\"uuid\": uuid,\n\t\t\"dtid\": dtid,\n\t\t\"name\": name\n\t}\n\t                \n\t            }, function(error, response, body) {\n\t\tconsole.log(body);\n\t\tassert.isNotNull(body);\n\t    assert.equal(body.success, true);\n\t    done();\n    });",
                "err": {
                  "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves."
                },
                "isRoot": false,
                "uuid": "3818d76c-55f7-4f0e-b028-a3feb8161a94",
                "parentUUID": "63354843-631c-4ac5-a2c3-235540784354",
                "skipped": false
              }
            ],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 0,
            "totalFailures": 1,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": true,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2010
          },
          {
            "title": "sendMessages",
            "suites": [],
            "tests": [
              {
                "title": "sendMessages",
                "fullTitle": "Edge node manager testing sendMessages sendMessages",
                "timedOut": false,
                "duration": 1024,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/devices/\"+uuid);\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n\t\t\t\turi: requestURL,\n\t\t\t\tmethod: \"PUT\",\n\t\t\t\tjson: {\n\t\t\t\t\t \"reboot\": true\n\t\t\t\t}\n\t\t\t}, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body);\n                    assert.equal(body.success, true);\n                    done();\n\t\t\t\t\n\t\t\t});",
                "err": {},
                "isRoot": false,
                "uuid": "32d81a44-7e89-441e-a4ce-92ee7c0beb6d",
                "parentUUID": "d7daedf8-75d4-438c-bef8-84d0222cdd94",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/enm.js",
            "uuid": "d7daedf8-75d4-438c-bef8-84d0222cdd94",
            "fullFile": "/root/enmd/enm.js",
            "passes": [
              {
                "title": "sendMessages",
                "fullTitle": "Edge node manager testing sendMessages sendMessages",
                "timedOut": false,
                "duration": 1024,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/devices/\"+uuid);\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n\t\t\t\turi: requestURL,\n\t\t\t\tmethod: \"PUT\",\n\t\t\t\tjson: {\n\t\t\t\t\t \"reboot\": true\n\t\t\t\t}\n\t\t\t}, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body);\n                    assert.equal(body.success, true);\n                    done();\n\t\t\t\t\n\t\t\t});",
                "err": {},
                "isRoot": false,
                "uuid": "32d81a44-7e89-441e-a4ce-92ee7c0beb6d",
                "parentUUID": "d7daedf8-75d4-438c-bef8-84d0222cdd94",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1024
          },
          {
            "title": "sendMessages",
            "suites": [],
            "tests": [
              {
                "title": "sendMessages",
                "fullTitle": "Edge node manager testing sendMessages sendMessages",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/devices/\"+uuid+\"/messages\");\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n\t\t\t\turi: requestURL,\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tjson: {\n\t\t\t\t\t\"data\": {\"reboot\": true }\n\t\t\t\t}\n\t\t\t}, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body);\n                    assert.equal(body.success, true);\n                    done();\t\n\t\t\t});",
                "err": {},
                "isRoot": false,
                "uuid": "81cd761c-aa8b-4abe-9294-6fc8daffa619",
                "parentUUID": "f0f728ad-544f-4f31-a36c-c0b82fa0165e",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/enm.js",
            "uuid": "f0f728ad-544f-4f31-a36c-c0b82fa0165e",
            "fullFile": "/root/enmd/enm.js",
            "passes": [
              {
                "title": "sendMessages",
                "fullTitle": "Edge node manager testing sendMessages sendMessages",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/devices/\"+uuid+\"/messages\");\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n\t\t\t\turi: requestURL,\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tjson: {\n\t\t\t\t\t\"data\": {\"reboot\": true }\n\t\t\t\t}\n\t\t\t}, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body);\n                    assert.equal(body.success, true);\n                    done();\t\n\t\t\t});",
                "err": {},
                "isRoot": false,
                "uuid": "81cd761c-aa8b-4abe-9294-6fc8daffa619",
                "parentUUID": "f0f728ad-544f-4f31-a36c-c0b82fa0165e",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 20
          },
          {
            "title": "sendActions",
            "suites": [],
            "tests": [
              {
                "title": "sendMessages",
                "fullTitle": "Edge node manager testing sendActions sendMessages",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/devices/\"+uuid+\"/messages\");\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n\t\t\t\turi: requestURL,\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tjson: {\n\t\t\t\t\t\"data\": {\"alarm\": true }\n\t\t\t\t}\n\t\t\t}, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body);\n                    assert.equal(body.success, true);\n                    done();\t\n\t\t\t});",
                "err": {},
                "isRoot": false,
                "uuid": "821cc3b8-db53-4216-9e27-0dd279fa960f",
                "parentUUID": "a72d0380-573d-46a9-92b5-5ab817e0c953",
                "skipped": false
              },
              {
                "title": "sendActions setOn",
                "fullTitle": "Edge node manager testing sendActions sendActions setOn",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/devices/\"+uuid+\"/messages\");\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n\t\t\t\turi: requestURL,\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tjson: {\n\t\t\t\t\t\"data\": {\"actions\":[{\"name\":\"seton\"}]} \n\t\t\t\t}\n\t\t\t}, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body);\n                     assert.equal(body.success, true);\n                    done();\n\t\t\t\t\n\t\t\t});",
                "err": {},
                "isRoot": false,
                "uuid": "6d28cef8-9753-44fa-a491-ec0eec3acf30",
                "parentUUID": "a72d0380-573d-46a9-92b5-5ab817e0c953",
                "skipped": false
              },
              {
                "title": "sendActions SetOff",
                "fullTitle": "Edge node manager testing sendActions sendActions SetOff",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/devices/\"+uuid+\"/messages\");\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n\t\t\t\turi: requestURL,\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tjson: {\n\t\t\t\t\t\"data\": {\"actions\":[{\"name\":\"setoff\"}]} \n\t\t\t\t}\n\t\t\t}, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body);\n                     assert.equal(body.success, true);\n                    done();\n\t\t\t\t\n\t\t\t});",
                "err": {},
                "isRoot": false,
                "uuid": "4dbc9a4c-1a31-4f5e-93f2-33cb8f930dbd",
                "parentUUID": "a72d0380-573d-46a9-92b5-5ab817e0c953",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/enm.js",
            "uuid": "a72d0380-573d-46a9-92b5-5ab817e0c953",
            "fullFile": "/root/enmd/enm.js",
            "passes": [
              {
                "title": "sendMessages",
                "fullTitle": "Edge node manager testing sendActions sendMessages",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/devices/\"+uuid+\"/messages\");\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n\t\t\t\turi: requestURL,\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tjson: {\n\t\t\t\t\t\"data\": {\"alarm\": true }\n\t\t\t\t}\n\t\t\t}, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body);\n                    assert.equal(body.success, true);\n                    done();\t\n\t\t\t});",
                "err": {},
                "isRoot": false,
                "uuid": "821cc3b8-db53-4216-9e27-0dd279fa960f",
                "parentUUID": "a72d0380-573d-46a9-92b5-5ab817e0c953",
                "skipped": false
              },
              {
                "title": "sendActions setOn",
                "fullTitle": "Edge node manager testing sendActions sendActions setOn",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/devices/\"+uuid+\"/messages\");\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n\t\t\t\turi: requestURL,\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tjson: {\n\t\t\t\t\t\"data\": {\"actions\":[{\"name\":\"seton\"}]} \n\t\t\t\t}\n\t\t\t}, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body);\n                     assert.equal(body.success, true);\n                    done();\n\t\t\t\t\n\t\t\t});",
                "err": {},
                "isRoot": false,
                "uuid": "6d28cef8-9753-44fa-a491-ec0eec3acf30",
                "parentUUID": "a72d0380-573d-46a9-92b5-5ab817e0c953",
                "skipped": false
              },
              {
                "title": "sendActions SetOff",
                "fullTitle": "Edge node manager testing sendActions sendActions SetOff",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/devices/\"+uuid+\"/messages\");\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n\t\t\t\turi: requestURL,\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tjson: {\n\t\t\t\t\t\"data\": {\"actions\":[{\"name\":\"setoff\"}]} \n\t\t\t\t}\n\t\t\t}, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body);\n                     assert.equal(body.success, true);\n                    done();\n\t\t\t\t\n\t\t\t});",
                "err": {},
                "isRoot": false,
                "uuid": "4dbc9a4c-1a31-4f5e-93f2-33cb8f930dbd",
                "parentUUID": "a72d0380-573d-46a9-92b5-5ab817e0c953",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 47
          },
          {
            "title": "deleteDevice",
            "suites": [],
            "tests": [
              {
                "title": "deleteDevice",
                "fullTitle": "Edge node manager testing deleteDevice deleteDevice",
                "timedOut": false,
                "duration": 373,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/service/AKCProvision\");\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n\t\t\t\turi: requestURL,\n\t\t\t\tmethod: \"DELETE\",\n\t\t\t\tjson: {\n\t\t\t\t\t\"uuid\": uuid\n\t\t\t\t}\n\t\t\t}, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body);\n\t\t\t\tassert.equal(body.success, true);\n\t\t\t    done();\n\t\t\t});",
                "err": {},
                "isRoot": false,
                "uuid": "448f1dd7-517d-4ca5-be35-984208a3aa7e",
                "parentUUID": "f40c12c2-9e47-4d8d-a15e-9741746e5aea",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/enm.js",
            "uuid": "f40c12c2-9e47-4d8d-a15e-9741746e5aea",
            "fullFile": "/root/enmd/enm.js",
            "passes": [
              {
                "title": "deleteDevice",
                "fullTitle": "Edge node manager testing deleteDevice deleteDevice",
                "timedOut": false,
                "duration": 373,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/service/AKCProvision\");\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n\t\t\t\turi: requestURL,\n\t\t\t\tmethod: \"DELETE\",\n\t\t\t\tjson: {\n\t\t\t\t\t\"uuid\": uuid\n\t\t\t\t}\n\t\t\t}, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body);\n\t\t\t\tassert.equal(body.success, true);\n\t\t\t    done();\n\t\t\t});",
                "err": {},
                "isRoot": false,
                "uuid": "448f1dd7-517d-4ca5-be35-984208a3aa7e",
                "parentUUID": "f40c12c2-9e47-4d8d-a15e-9741746e5aea",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 373
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/enm.js",
        "uuid": "5d1be32e-4b38-4671-bf73-6362409de727",
        "fullFile": "/root/enmd/enm.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "309cbdf9-8af9-4859-aa30-e05276c708bf",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "userid and token should set",
      "fullTitle": "Set Configuration userid and token should set",
      "timedOut": false,
      "duration": 204,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var requestURL = createUrlFor(\"/service/conf\");\nconsole.log(\"URL = \"+requestURL);\nrequest({\n  uri: requestURL,\n  method: \"PUT\",\n  json: {\n\t\"token\": token,\n\t\"user_id\":userid\n  }\n}, function(error, response, body) {\n  console.log(body);\n  assert.isNotNull(body);\n  assert.equal(body.success, true);\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "72ba1bc2-61df-47e8-9d8c-9152ddc1532f",
      "parentUUID": "f522b993-1a96-439d-9e0c-1dc3b893fe02",
      "skipped": false
    },
    {
      "title": "userid and token should get and compare with set values",
      "fullTitle": "Get Configuration userid and token should get and compare with set values",
      "timedOut": false,
      "duration": 37,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var requestURL = createUrlFor(\"/service/conf\");\nconsole.log(\"URL = \"+requestURL);\nrequest({\n  uri: requestURL,\n  method: \"GET\"\n}, function(error, response, body) {\n\tconsole.log(body);\n\tvar response = JSON.parse(body);\n\tassert.equal(response.user_id , userid);\n\tassert.equal(response.token , token);\n\tdone();\n\t\n});",
      "err": {},
      "isRoot": false,
      "uuid": "a885d911-d2e3-43b0-b934-01599384362c",
      "parentUUID": "3de9ddf2-4cf2-48b1-b5e6-e6332683a96c",
      "skipped": false
    },
    {
      "title": "Set discovery to true",
      "fullTitle": "Set Discovery Set discovery to true",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var requestURL = createUrlFor(\"/service\");\nconsole.log(\"URL = \"+requestURL);\nrequest({\n  uri: requestURL,\n  method: \"PUT\",\n  json: {\n\t\"DiscoveryStarted\": true\n  }\n}, function(error, response, body) {\n\tconsole.log(body);\n\tassert.equal(body.discoverystarted , true);\n\tdone();  \n});",
      "err": {},
      "isRoot": false,
      "uuid": "899eab3b-9b50-4d9a-a29a-83c4ee5a81cb",
      "parentUUID": "856a2d2d-694f-49cb-a160-d60574abd088",
      "skipped": false
    },
    {
      "title": "Get discovery",
      "fullTitle": "Get Discovery Get discovery",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var requestURL = createUrlFor(\"/service\");\nconsole.log(\"URL = \"+requestURL);\nrequest({\n  uri: requestURL,\n  method: \"GET\"\n}, function(error, response, body) {\n\tvar json=JSON.parse(body);\n \t\t\t\tassert.equal(json.discoverystarted,true);\n\tdone();  \n});",
      "err": {},
      "isRoot": false,
      "uuid": "0e110870-e209-48a0-8ae6-4f26d496cd02",
      "parentUUID": "6978cc0c-fd67-47cf-90f3-32429f914f64",
      "skipped": false
    },
    {
      "title": "Get all edge node devices and check is there are any A0 family",
      "fullTitle": "Get all edge node devices Get all edge node devices and check is there are any A0 family",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var requestURL = createUrlFor(\"/devices\");\nconsole.log(\"URL = \"+requestURL);\nrequest({\n  uri: requestURL,\n  method: \"GET\"\n}, function(error, response, body) {\n\tbody = JSON.parse(body);\n\tconsole.log(body);\t\t\t\t\n\t\n\tassert.isNotNull(body);\n\tfor(var i=0;i< body.length;i++)\n\t{\n\t\tvar device = body[i];\n\t\tconsole.log(\"\\n device \"+i+\" details = \"+ JSON.stringify(device));\t\t\t\t\t\n\t\tif(device.hardware.modelnum == model_number && device.status.state == \"Online\"){\n\t\t\tonlineDeviceList[i] = device;\n\t\t}\n\t}\n\tassert.equal(onlineDeviceList.length>0, true);\n\tdone();\t\n});",
      "err": {},
      "isRoot": false,
      "uuid": "edead2b9-929d-41c4-9368-f769fc052050",
      "parentUUID": "2ebf1946-9e94-4fe8-af1e-bb68a23eb21b",
      "skipped": false
    },
    {
      "title": "getFirmwareVersionForUUID",
      "fullTitle": "getFirmwareVersionForUUID getFirmwareVersionForUUID",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/devices\");\n\t\t    requestURL = requestURL +\"/\"+ uuid + \"/firmware\"\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n              uri: requestURL,\n              method: \"GET\"\n            }, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body); \n                    done();\n            });",
      "err": {},
      "isRoot": false,
      "uuid": "785b15eb-8bfe-4819-8559-ed2df488480c",
      "parentUUID": "73283d59-b603-405a-adee-c68b3e151bb2",
      "skipped": false
    },
    {
      "title": "registerDevice",
      "fullTitle": "registerDevice registerDevice",
      "timedOut": true,
      "duration": 2010,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "console.log(\"name = \"+name);\nconsole.log(\"uuid = \"+uuid);\nvar requestURL = createUrlFor(\"/service/AKCProvision\");\nconsole.log(\"URL = \"+requestURL);\nrequest({\n\t            uri: requestURL,\n\tmethod: \"POST\",\n\t            json: {\n\t\t\"uuid\": uuid,\n\t\t\"dtid\": dtid,\n\t\t\"name\": name\n\t}\n\t                \n\t            }, function(error, response, body) {\n\t\tconsole.log(body);\n\t\tassert.isNotNull(body);\n\t    assert.equal(body.success, true);\n\t    done();\n    });",
      "err": {
        "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves."
      },
      "isRoot": false,
      "uuid": "3818d76c-55f7-4f0e-b028-a3feb8161a94",
      "parentUUID": "63354843-631c-4ac5-a2c3-235540784354",
      "skipped": false
    },
    {
      "title": "sendMessages",
      "fullTitle": "sendMessages sendMessages",
      "timedOut": false,
      "duration": 1024,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/devices/\"+uuid);\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n\t\t\t\turi: requestURL,\n\t\t\t\tmethod: \"PUT\",\n\t\t\t\tjson: {\n\t\t\t\t\t \"reboot\": true\n\t\t\t\t}\n\t\t\t}, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body);\n                    assert.equal(body.success, true);\n                    done();\n\t\t\t\t\n\t\t\t});",
      "err": {},
      "isRoot": false,
      "uuid": "32d81a44-7e89-441e-a4ce-92ee7c0beb6d",
      "parentUUID": "d7daedf8-75d4-438c-bef8-84d0222cdd94",
      "skipped": false
    },
    {
      "title": "sendMessages",
      "fullTitle": "sendMessages sendMessages",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/devices/\"+uuid+\"/messages\");\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n\t\t\t\turi: requestURL,\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tjson: {\n\t\t\t\t\t\"data\": {\"reboot\": true }\n\t\t\t\t}\n\t\t\t}, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body);\n                    assert.equal(body.success, true);\n                    done();\t\n\t\t\t});",
      "err": {},
      "isRoot": false,
      "uuid": "81cd761c-aa8b-4abe-9294-6fc8daffa619",
      "parentUUID": "f0f728ad-544f-4f31-a36c-c0b82fa0165e",
      "skipped": false
    },
    {
      "title": "sendMessages",
      "fullTitle": "sendActions sendMessages",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/devices/\"+uuid+\"/messages\");\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n\t\t\t\turi: requestURL,\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tjson: {\n\t\t\t\t\t\"data\": {\"alarm\": true }\n\t\t\t\t}\n\t\t\t}, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body);\n                    assert.equal(body.success, true);\n                    done();\t\n\t\t\t});",
      "err": {},
      "isRoot": false,
      "uuid": "821cc3b8-db53-4216-9e27-0dd279fa960f",
      "parentUUID": "a72d0380-573d-46a9-92b5-5ab817e0c953",
      "skipped": false
    },
    {
      "title": "sendActions setOn",
      "fullTitle": "sendActions sendActions setOn",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/devices/\"+uuid+\"/messages\");\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n\t\t\t\turi: requestURL,\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tjson: {\n\t\t\t\t\t\"data\": {\"actions\":[{\"name\":\"seton\"}]} \n\t\t\t\t}\n\t\t\t}, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body);\n                     assert.equal(body.success, true);\n                    done();\n\t\t\t\t\n\t\t\t});",
      "err": {},
      "isRoot": false,
      "uuid": "6d28cef8-9753-44fa-a491-ec0eec3acf30",
      "parentUUID": "a72d0380-573d-46a9-92b5-5ab817e0c953",
      "skipped": false
    },
    {
      "title": "sendActions SetOff",
      "fullTitle": "sendActions sendActions SetOff",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/devices/\"+uuid+\"/messages\");\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n\t\t\t\turi: requestURL,\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tjson: {\n\t\t\t\t\t\"data\": {\"actions\":[{\"name\":\"setoff\"}]} \n\t\t\t\t}\n\t\t\t}, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body);\n                     assert.equal(body.success, true);\n                    done();\n\t\t\t\t\n\t\t\t});",
      "err": {},
      "isRoot": false,
      "uuid": "4dbc9a4c-1a31-4f5e-93f2-33cb8f930dbd",
      "parentUUID": "a72d0380-573d-46a9-92b5-5ab817e0c953",
      "skipped": false
    },
    {
      "title": "deleteDevice",
      "fullTitle": "deleteDevice deleteDevice",
      "timedOut": false,
      "duration": 373,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/service/AKCProvision\");\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n\t\t\t\turi: requestURL,\n\t\t\t\tmethod: \"DELETE\",\n\t\t\t\tjson: {\n\t\t\t\t\t\"uuid\": uuid\n\t\t\t\t}\n\t\t\t}, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body);\n\t\t\t\tassert.equal(body.success, true);\n\t\t\t    done();\n\t\t\t});",
      "err": {},
      "isRoot": false,
      "uuid": "448f1dd7-517d-4ca5-be35-984208a3aa7e",
      "parentUUID": "f40c12c2-9e47-4d8d-a15e-9741746e5aea",
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "userid and token should set",
      "fullTitle": "Set Configuration userid and token should set",
      "timedOut": false,
      "duration": 204,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var requestURL = createUrlFor(\"/service/conf\");\nconsole.log(\"URL = \"+requestURL);\nrequest({\n  uri: requestURL,\n  method: \"PUT\",\n  json: {\n\t\"token\": token,\n\t\"user_id\":userid\n  }\n}, function(error, response, body) {\n  console.log(body);\n  assert.isNotNull(body);\n  assert.equal(body.success, true);\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "72ba1bc2-61df-47e8-9d8c-9152ddc1532f",
      "parentUUID": "f522b993-1a96-439d-9e0c-1dc3b893fe02",
      "skipped": false
    },
    {
      "title": "userid and token should get and compare with set values",
      "fullTitle": "Get Configuration userid and token should get and compare with set values",
      "timedOut": false,
      "duration": 37,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var requestURL = createUrlFor(\"/service/conf\");\nconsole.log(\"URL = \"+requestURL);\nrequest({\n  uri: requestURL,\n  method: \"GET\"\n}, function(error, response, body) {\n\tconsole.log(body);\n\tvar response = JSON.parse(body);\n\tassert.equal(response.user_id , userid);\n\tassert.equal(response.token , token);\n\tdone();\n\t\n});",
      "err": {},
      "isRoot": false,
      "uuid": "a885d911-d2e3-43b0-b934-01599384362c",
      "parentUUID": "3de9ddf2-4cf2-48b1-b5e6-e6332683a96c",
      "skipped": false
    },
    {
      "title": "Set discovery to true",
      "fullTitle": "Set Discovery Set discovery to true",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var requestURL = createUrlFor(\"/service\");\nconsole.log(\"URL = \"+requestURL);\nrequest({\n  uri: requestURL,\n  method: \"PUT\",\n  json: {\n\t\"DiscoveryStarted\": true\n  }\n}, function(error, response, body) {\n\tconsole.log(body);\n\tassert.equal(body.discoverystarted , true);\n\tdone();  \n});",
      "err": {},
      "isRoot": false,
      "uuid": "899eab3b-9b50-4d9a-a29a-83c4ee5a81cb",
      "parentUUID": "856a2d2d-694f-49cb-a160-d60574abd088",
      "skipped": false
    },
    {
      "title": "Get discovery",
      "fullTitle": "Get Discovery Get discovery",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var requestURL = createUrlFor(\"/service\");\nconsole.log(\"URL = \"+requestURL);\nrequest({\n  uri: requestURL,\n  method: \"GET\"\n}, function(error, response, body) {\n\tvar json=JSON.parse(body);\n \t\t\t\tassert.equal(json.discoverystarted,true);\n\tdone();  \n});",
      "err": {},
      "isRoot": false,
      "uuid": "0e110870-e209-48a0-8ae6-4f26d496cd02",
      "parentUUID": "6978cc0c-fd67-47cf-90f3-32429f914f64",
      "skipped": false
    },
    {
      "title": "Get all edge node devices and check is there are any A0 family",
      "fullTitle": "Get all edge node devices Get all edge node devices and check is there are any A0 family",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var requestURL = createUrlFor(\"/devices\");\nconsole.log(\"URL = \"+requestURL);\nrequest({\n  uri: requestURL,\n  method: \"GET\"\n}, function(error, response, body) {\n\tbody = JSON.parse(body);\n\tconsole.log(body);\t\t\t\t\n\t\n\tassert.isNotNull(body);\n\tfor(var i=0;i< body.length;i++)\n\t{\n\t\tvar device = body[i];\n\t\tconsole.log(\"\\n device \"+i+\" details = \"+ JSON.stringify(device));\t\t\t\t\t\n\t\tif(device.hardware.modelnum == model_number && device.status.state == \"Online\"){\n\t\t\tonlineDeviceList[i] = device;\n\t\t}\n\t}\n\tassert.equal(onlineDeviceList.length>0, true);\n\tdone();\t\n});",
      "err": {},
      "isRoot": false,
      "uuid": "edead2b9-929d-41c4-9368-f769fc052050",
      "parentUUID": "2ebf1946-9e94-4fe8-af1e-bb68a23eb21b",
      "skipped": false
    },
    {
      "title": "getFirmwareVersionForUUID",
      "fullTitle": "getFirmwareVersionForUUID getFirmwareVersionForUUID",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/devices\");\n\t\t    requestURL = requestURL +\"/\"+ uuid + \"/firmware\"\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n              uri: requestURL,\n              method: \"GET\"\n            }, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body); \n                    done();\n            });",
      "err": {},
      "isRoot": false,
      "uuid": "785b15eb-8bfe-4819-8559-ed2df488480c",
      "parentUUID": "73283d59-b603-405a-adee-c68b3e151bb2",
      "skipped": false
    },
    {
      "title": "sendMessages",
      "fullTitle": "sendMessages sendMessages",
      "timedOut": false,
      "duration": 1024,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/devices/\"+uuid);\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n\t\t\t\turi: requestURL,\n\t\t\t\tmethod: \"PUT\",\n\t\t\t\tjson: {\n\t\t\t\t\t \"reboot\": true\n\t\t\t\t}\n\t\t\t}, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body);\n                    assert.equal(body.success, true);\n                    done();\n\t\t\t\t\n\t\t\t});",
      "err": {},
      "isRoot": false,
      "uuid": "32d81a44-7e89-441e-a4ce-92ee7c0beb6d",
      "parentUUID": "d7daedf8-75d4-438c-bef8-84d0222cdd94",
      "skipped": false
    },
    {
      "title": "sendMessages",
      "fullTitle": "sendMessages sendMessages",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/devices/\"+uuid+\"/messages\");\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n\t\t\t\turi: requestURL,\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tjson: {\n\t\t\t\t\t\"data\": {\"reboot\": true }\n\t\t\t\t}\n\t\t\t}, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body);\n                    assert.equal(body.success, true);\n                    done();\t\n\t\t\t});",
      "err": {},
      "isRoot": false,
      "uuid": "81cd761c-aa8b-4abe-9294-6fc8daffa619",
      "parentUUID": "f0f728ad-544f-4f31-a36c-c0b82fa0165e",
      "skipped": false
    },
    {
      "title": "sendMessages",
      "fullTitle": "sendActions sendMessages",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/devices/\"+uuid+\"/messages\");\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n\t\t\t\turi: requestURL,\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tjson: {\n\t\t\t\t\t\"data\": {\"alarm\": true }\n\t\t\t\t}\n\t\t\t}, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body);\n                    assert.equal(body.success, true);\n                    done();\t\n\t\t\t});",
      "err": {},
      "isRoot": false,
      "uuid": "821cc3b8-db53-4216-9e27-0dd279fa960f",
      "parentUUID": "a72d0380-573d-46a9-92b5-5ab817e0c953",
      "skipped": false
    },
    {
      "title": "sendActions setOn",
      "fullTitle": "sendActions sendActions setOn",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/devices/\"+uuid+\"/messages\");\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n\t\t\t\turi: requestURL,\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tjson: {\n\t\t\t\t\t\"data\": {\"actions\":[{\"name\":\"seton\"}]} \n\t\t\t\t}\n\t\t\t}, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body);\n                     assert.equal(body.success, true);\n                    done();\n\t\t\t\t\n\t\t\t});",
      "err": {},
      "isRoot": false,
      "uuid": "6d28cef8-9753-44fa-a491-ec0eec3acf30",
      "parentUUID": "a72d0380-573d-46a9-92b5-5ab817e0c953",
      "skipped": false
    },
    {
      "title": "sendActions SetOff",
      "fullTitle": "sendActions sendActions SetOff",
      "timedOut": false,
      "duration": 15,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/devices/\"+uuid+\"/messages\");\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n\t\t\t\turi: requestURL,\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tjson: {\n\t\t\t\t\t\"data\": {\"actions\":[{\"name\":\"setoff\"}]} \n\t\t\t\t}\n\t\t\t}, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body);\n                     assert.equal(body.success, true);\n                    done();\n\t\t\t\t\n\t\t\t});",
      "err": {},
      "isRoot": false,
      "uuid": "4dbc9a4c-1a31-4f5e-93f2-33cb8f930dbd",
      "parentUUID": "a72d0380-573d-46a9-92b5-5ab817e0c953",
      "skipped": false
    },
    {
      "title": "deleteDevice",
      "fullTitle": "deleteDevice deleteDevice",
      "timedOut": false,
      "duration": 373,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/service/AKCProvision\");\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n\t\t\t\turi: requestURL,\n\t\t\t\tmethod: \"DELETE\",\n\t\t\t\tjson: {\n\t\t\t\t\t\"uuid\": uuid\n\t\t\t\t}\n\t\t\t}, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body);\n\t\t\t\tassert.equal(body.success, true);\n\t\t\t    done();\n\t\t\t});",
      "err": {},
      "isRoot": false,
      "uuid": "448f1dd7-517d-4ca5-be35-984208a3aa7e",
      "parentUUID": "f40c12c2-9e47-4d8d-a15e-9741746e5aea",
      "skipped": false
    }
  ],
  "allFailures": [
    {
      "title": "registerDevice",
      "fullTitle": "registerDevice registerDevice",
      "timedOut": true,
      "duration": 2010,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "console.log(\"name = \"+name);\nconsole.log(\"uuid = \"+uuid);\nvar requestURL = createUrlFor(\"/service/AKCProvision\");\nconsole.log(\"URL = \"+requestURL);\nrequest({\n\t            uri: requestURL,\n\tmethod: \"POST\",\n\t            json: {\n\t\t\"uuid\": uuid,\n\t\t\"dtid\": dtid,\n\t\t\"name\": name\n\t}\n\t                \n\t            }, function(error, response, body) {\n\t\tconsole.log(body);\n\t\tassert.isNotNull(body);\n\t    assert.equal(body.success, true);\n\t    done();\n    });",
      "err": {
        "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves."
      },
      "isRoot": false,
      "uuid": "3818d76c-55f7-4f0e-b028-a3feb8161a94",
      "parentUUID": "63354843-631c-4ac5-a2c3-235540784354",
      "skipped": false
    }
  ],
  "copyrightYear": 2017
}