{
  "stats": {
    "suites": 12,
    "tests": 13,
    "passes": 11,
    "pending": 0,
    "failures": 2,
    "start": "2017-01-30T04:34:20.950Z",
    "end": "2017-01-30T04:34:27.131Z",
    "duration": 6182,
    "testsRegistered": 13,
    "passPercent": 84.6,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Edge node manager testing",
        "suites": [
          {
            "title": "Set Configuration",
            "suites": [],
            "tests": [
              {
                "title": "userid and token should set",
                "fullTitle": "Edge node manager testing Set Configuration userid and token should set",
                "timedOut": false,
                "duration": 335,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var requestURL = createUrlFor(\"/service/conf\");\nconsole.log(\"URL = \"+requestURL);\nrequest({\n  uri: requestURL,\n  method: \"PUT\",\n  json: {\n\t\"token\": token,\n\t\"user_id\":userid\n  }\n}, function(error, response, body) {\n  console.log(body);\n  assert.isNotNull(body);\n  assert.equal(body.success, true);\n  done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "fe2fb003-3e10-4070-9f0a-624f15586dca",
                "parentUUID": "62c5b87d-491c-4f10-9c9b-4ed219431580",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/enm.js",
            "uuid": "62c5b87d-491c-4f10-9c9b-4ed219431580",
            "fullFile": "/root/enm/enm.js",
            "passes": [
              {
                "title": "userid and token should set",
                "fullTitle": "Edge node manager testing Set Configuration userid and token should set",
                "timedOut": false,
                "duration": 335,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var requestURL = createUrlFor(\"/service/conf\");\nconsole.log(\"URL = \"+requestURL);\nrequest({\n  uri: requestURL,\n  method: \"PUT\",\n  json: {\n\t\"token\": token,\n\t\"user_id\":userid\n  }\n}, function(error, response, body) {\n  console.log(body);\n  assert.isNotNull(body);\n  assert.equal(body.success, true);\n  done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "fe2fb003-3e10-4070-9f0a-624f15586dca",
                "parentUUID": "62c5b87d-491c-4f10-9c9b-4ed219431580",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 335
          },
          {
            "title": "Get Configuration",
            "suites": [],
            "tests": [
              {
                "title": "userid and token should get and compare with set values",
                "fullTitle": "Edge node manager testing Get Configuration userid and token should get and compare with set values",
                "timedOut": false,
                "duration": 64,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var requestURL = createUrlFor(\"/service/conf\");\nconsole.log(\"URL = \"+requestURL);\nrequest({\n  uri: requestURL,\n  method: \"GET\"\n}, function(error, response, body) {\n\tconsole.log(body);\n\tvar response = JSON.parse(body);\n\tassert.equal(response.user_id , userid);\n\tassert.equal(response.token , token);\n\tdone();\n\t\n});",
                "err": {},
                "isRoot": false,
                "uuid": "9a8a5bcb-6fd9-4efc-99b3-53e97dadcd6a",
                "parentUUID": "90fc9581-0523-4bfe-94c7-d1f65a9fd66b",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/enm.js",
            "uuid": "90fc9581-0523-4bfe-94c7-d1f65a9fd66b",
            "fullFile": "/root/enm/enm.js",
            "passes": [
              {
                "title": "userid and token should get and compare with set values",
                "fullTitle": "Edge node manager testing Get Configuration userid and token should get and compare with set values",
                "timedOut": false,
                "duration": 64,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var requestURL = createUrlFor(\"/service/conf\");\nconsole.log(\"URL = \"+requestURL);\nrequest({\n  uri: requestURL,\n  method: \"GET\"\n}, function(error, response, body) {\n\tconsole.log(body);\n\tvar response = JSON.parse(body);\n\tassert.equal(response.user_id , userid);\n\tassert.equal(response.token , token);\n\tdone();\n\t\n});",
                "err": {},
                "isRoot": false,
                "uuid": "9a8a5bcb-6fd9-4efc-99b3-53e97dadcd6a",
                "parentUUID": "90fc9581-0523-4bfe-94c7-d1f65a9fd66b",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 64
          },
          {
            "title": "Set Discovery",
            "suites": [],
            "tests": [
              {
                "title": "Set discovery to true",
                "fullTitle": "Edge node manager testing Set Discovery Set discovery to true",
                "timedOut": false,
                "duration": 30,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var requestURL = createUrlFor(\"/service\");\nconsole.log(\"URL = \"+requestURL);\nrequest({\n  uri: requestURL,\n  method: \"PUT\",\n  json: {\n\t\"DiscoveryStarted\": true\n  }\n}, function(error, response, body) {\n\tconsole.log(body);\n\tassert.equal(body.discoverystarted , true);\n\tdone();  \n});",
                "err": {},
                "isRoot": false,
                "uuid": "4344e612-f75c-4aa2-b580-92120931835f",
                "parentUUID": "fe1a595c-5ef9-4b4a-8fdf-331fefd96a15",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/enm.js",
            "uuid": "fe1a595c-5ef9-4b4a-8fdf-331fefd96a15",
            "fullFile": "/root/enm/enm.js",
            "passes": [
              {
                "title": "Set discovery to true",
                "fullTitle": "Edge node manager testing Set Discovery Set discovery to true",
                "timedOut": false,
                "duration": 30,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var requestURL = createUrlFor(\"/service\");\nconsole.log(\"URL = \"+requestURL);\nrequest({\n  uri: requestURL,\n  method: \"PUT\",\n  json: {\n\t\"DiscoveryStarted\": true\n  }\n}, function(error, response, body) {\n\tconsole.log(body);\n\tassert.equal(body.discoverystarted , true);\n\tdone();  \n});",
                "err": {},
                "isRoot": false,
                "uuid": "4344e612-f75c-4aa2-b580-92120931835f",
                "parentUUID": "fe1a595c-5ef9-4b4a-8fdf-331fefd96a15",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 30
          },
          {
            "title": "Get Discovery",
            "suites": [],
            "tests": [
              {
                "title": "Get discovery",
                "fullTitle": "Edge node manager testing Get Discovery Get discovery",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var requestURL = createUrlFor(\"/service\");\nconsole.log(\"URL = \"+requestURL);\nrequest({\n  uri: requestURL,\n  method: \"GET\"\n}, function(error, response, body) {\n\tvar json=JSON.parse(body);\n \t\t\t\tassert.equal(json.discoverystarted,true);\n\tdone();  \n});",
                "err": {},
                "isRoot": false,
                "uuid": "72c478d7-94f3-46db-bdc3-69b45e971ecd",
                "parentUUID": "41d6bbbe-ce80-49dd-ada9-b4188f680fbc",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/enm.js",
            "uuid": "41d6bbbe-ce80-49dd-ada9-b4188f680fbc",
            "fullFile": "/root/enm/enm.js",
            "passes": [
              {
                "title": "Get discovery",
                "fullTitle": "Edge node manager testing Get Discovery Get discovery",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var requestURL = createUrlFor(\"/service\");\nconsole.log(\"URL = \"+requestURL);\nrequest({\n  uri: requestURL,\n  method: \"GET\"\n}, function(error, response, body) {\n\tvar json=JSON.parse(body);\n \t\t\t\tassert.equal(json.discoverystarted,true);\n\tdone();  \n});",
                "err": {},
                "isRoot": false,
                "uuid": "72c478d7-94f3-46db-bdc3-69b45e971ecd",
                "parentUUID": "41d6bbbe-ce80-49dd-ada9-b4188f680fbc",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 18
          },
          {
            "title": "Get all edge node devices",
            "suites": [],
            "tests": [
              {
                "title": "Get all edge node devices and check is there are any A0 family",
                "fullTitle": "Edge node manager testing Get all edge node devices Get all edge node devices and check is there are any A0 family",
                "timedOut": false,
                "duration": 44,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var requestURL = createUrlFor(\"/devices\");\nconsole.log(\"URL = \"+requestURL);\nrequest({\n  uri: requestURL,\n  method: \"GET\"\n}, function(error, response, body) {\n\tbody = JSON.parse(body);\n\tconsole.log(body);\t\t\t\t\n\t\n\tassert.isNotNull(body);\n\tfor(var i=0;i< body.length;i++)\n\t{\n\t\tvar device = body[i];\n\t\tconsole.log(\"\\n device \"+i+\" details = \"+ JSON.stringify(device));\t\t\t\t\t\n\t\tif(device.hardware.modelnum == model_number && device.status.state == \"Online\"){\n\t\t\tonlineDeviceList[i] = device;\n\t\t}\n\t}\n\tassert.equal(onlineDeviceList.length>0, true);\n\tdone();\t\n});",
                "err": {},
                "isRoot": false,
                "uuid": "a5d2eeda-e482-435f-93b8-7c9f18e80e7b",
                "parentUUID": "50f10bfe-5f30-47b8-9bc6-8eb71324012b",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/enm.js",
            "uuid": "50f10bfe-5f30-47b8-9bc6-8eb71324012b",
            "fullFile": "/root/enm/enm.js",
            "passes": [
              {
                "title": "Get all edge node devices and check is there are any A0 family",
                "fullTitle": "Edge node manager testing Get all edge node devices Get all edge node devices and check is there are any A0 family",
                "timedOut": false,
                "duration": 44,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var requestURL = createUrlFor(\"/devices\");\nconsole.log(\"URL = \"+requestURL);\nrequest({\n  uri: requestURL,\n  method: \"GET\"\n}, function(error, response, body) {\n\tbody = JSON.parse(body);\n\tconsole.log(body);\t\t\t\t\n\t\n\tassert.isNotNull(body);\n\tfor(var i=0;i< body.length;i++)\n\t{\n\t\tvar device = body[i];\n\t\tconsole.log(\"\\n device \"+i+\" details = \"+ JSON.stringify(device));\t\t\t\t\t\n\t\tif(device.hardware.modelnum == model_number && device.status.state == \"Online\"){\n\t\t\tonlineDeviceList[i] = device;\n\t\t}\n\t}\n\tassert.equal(onlineDeviceList.length>0, true);\n\tdone();\t\n});",
                "err": {},
                "isRoot": false,
                "uuid": "a5d2eeda-e482-435f-93b8-7c9f18e80e7b",
                "parentUUID": "50f10bfe-5f30-47b8-9bc6-8eb71324012b",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 44
          },
          {
            "title": "getFirmwareVersionForUUID",
            "suites": [],
            "tests": [
              {
                "title": "getFirmwareVersionForUUID",
                "fullTitle": "Edge node manager testing getFirmwareVersionForUUID getFirmwareVersionForUUID",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/devices\");\n\t\t    requestURL = requestURL +\"/\"+ uuid + \"/firmware\"\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n              uri: requestURL,\n              method: \"GET\"\n            }, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body); \n                    done();\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "036f5df6-6b79-48df-a8ce-3a9285fc8836",
                "parentUUID": "dd863263-7eed-4cbd-8326-de93f6ac7a61",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/enm.js",
            "uuid": "dd863263-7eed-4cbd-8326-de93f6ac7a61",
            "fullFile": "/root/enm/enm.js",
            "passes": [
              {
                "title": "getFirmwareVersionForUUID",
                "fullTitle": "Edge node manager testing getFirmwareVersionForUUID getFirmwareVersionForUUID",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/devices\");\n\t\t    requestURL = requestURL +\"/\"+ uuid + \"/firmware\"\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n              uri: requestURL,\n              method: \"GET\"\n            }, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body); \n                    done();\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "036f5df6-6b79-48df-a8ce-3a9285fc8836",
                "parentUUID": "dd863263-7eed-4cbd-8326-de93f6ac7a61",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 20
          },
          {
            "title": "registerDevice",
            "suites": [],
            "tests": [
              {
                "title": "registerDevice",
                "fullTitle": "Edge node manager testing registerDevice registerDevice",
                "timedOut": true,
                "duration": 2009,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "console.log(\"name = \"+name);\nconsole.log(\"uuid = \"+uuid);\nvar requestURL = createUrlFor(\"/service/AKCProvision\");\nconsole.log(\"URL = \"+requestURL);\nrequest({\n\t            uri: requestURL,\n\tmethod: \"POST\",\n\t            json: {\n\t\t\"uuid\": uuid,\n\t\t\"dtid\": dtid,\n\t\t\"name\": name\n\t}\n\t                \n\t            }, function(error, response, body) {\n\t\tconsole.log(body);\n\t\tassert.isNotNull(body);\n\t    assert.equal(body.success, true);\n\t    done();\n    });",
                "err": {
                  "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves."
                },
                "isRoot": false,
                "uuid": "28c274d4-3e41-4b09-a579-0010d9d9f33a",
                "parentUUID": "e6153551-6c6f-4816-abb2-5d019dd99ed1",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/enm.js",
            "uuid": "e6153551-6c6f-4816-abb2-5d019dd99ed1",
            "fullFile": "/root/enm/enm.js",
            "passes": [],
            "failures": [
              {
                "title": "registerDevice",
                "fullTitle": "Edge node manager testing registerDevice registerDevice",
                "timedOut": true,
                "duration": 2009,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "console.log(\"name = \"+name);\nconsole.log(\"uuid = \"+uuid);\nvar requestURL = createUrlFor(\"/service/AKCProvision\");\nconsole.log(\"URL = \"+requestURL);\nrequest({\n\t            uri: requestURL,\n\tmethod: \"POST\",\n\t            json: {\n\t\t\"uuid\": uuid,\n\t\t\"dtid\": dtid,\n\t\t\"name\": name\n\t}\n\t                \n\t            }, function(error, response, body) {\n\t\tconsole.log(body);\n\t\tassert.isNotNull(body);\n\t    assert.equal(body.success, true);\n\t    done();\n    });",
                "err": {
                  "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves."
                },
                "isRoot": false,
                "uuid": "28c274d4-3e41-4b09-a579-0010d9d9f33a",
                "parentUUID": "e6153551-6c6f-4816-abb2-5d019dd99ed1",
                "skipped": false
              }
            ],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 0,
            "totalFailures": 1,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": true,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2009
          },
          {
            "title": "sendMessages",
            "suites": [],
            "tests": [
              {
                "title": "sendMessages",
                "fullTitle": "Edge node manager testing sendMessages sendMessages",
                "timedOut": true,
                "duration": 2002,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/devices/\"+uuid);\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n\t\t\t\turi: requestURL,\n\t\t\t\tmethod: \"PUT\",\n\t\t\t\tjson: {\n\t\t\t\t\t \"reboot\": true\n\t\t\t\t}\n\t\t\t}, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body);\n                    assert.equal(body.success, true);\n                    done();\n\t\t\t\t\n\t\t\t});",
                "err": {
                  "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves."
                },
                "isRoot": false,
                "uuid": "ba0f7724-722b-47ec-88cb-1231b5ed1c7c",
                "parentUUID": "a8867769-23cc-4726-87dc-cace66a69fb6",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/enm.js",
            "uuid": "a8867769-23cc-4726-87dc-cace66a69fb6",
            "fullFile": "/root/enm/enm.js",
            "passes": [],
            "failures": [
              {
                "title": "sendMessages",
                "fullTitle": "Edge node manager testing sendMessages sendMessages",
                "timedOut": true,
                "duration": 2002,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/devices/\"+uuid);\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n\t\t\t\turi: requestURL,\n\t\t\t\tmethod: \"PUT\",\n\t\t\t\tjson: {\n\t\t\t\t\t \"reboot\": true\n\t\t\t\t}\n\t\t\t}, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body);\n                    assert.equal(body.success, true);\n                    done();\n\t\t\t\t\n\t\t\t});",
                "err": {
                  "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves."
                },
                "isRoot": false,
                "uuid": "ba0f7724-722b-47ec-88cb-1231b5ed1c7c",
                "parentUUID": "a8867769-23cc-4726-87dc-cace66a69fb6",
                "skipped": false
              }
            ],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 0,
            "totalFailures": 1,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": true,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2002
          },
          {
            "title": "sendMessages",
            "suites": [],
            "tests": [
              {
                "title": "sendMessages",
                "fullTitle": "Edge node manager testing sendMessages sendMessages",
                "timedOut": false,
                "duration": 1132,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/devices/\"+uuid+\"/messages\");\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n\t\t\t\turi: requestURL,\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tjson: {\n\t\t\t\t\t\"data\": {\"reboot\": true }\n\t\t\t\t}\n\t\t\t}, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body);\n                    assert.equal(body.success, true);\n                    done();\t\n\t\t\t});",
                "err": {},
                "isRoot": false,
                "uuid": "1d733a5f-ca8b-46fa-87d0-395815efdca4",
                "parentUUID": "33139feb-ff90-408d-a6aa-abec2f6266b2",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/enm.js",
            "uuid": "33139feb-ff90-408d-a6aa-abec2f6266b2",
            "fullFile": "/root/enm/enm.js",
            "passes": [
              {
                "title": "sendMessages",
                "fullTitle": "Edge node manager testing sendMessages sendMessages",
                "timedOut": false,
                "duration": 1132,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/devices/\"+uuid+\"/messages\");\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n\t\t\t\turi: requestURL,\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tjson: {\n\t\t\t\t\t\"data\": {\"reboot\": true }\n\t\t\t\t}\n\t\t\t}, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body);\n                    assert.equal(body.success, true);\n                    done();\t\n\t\t\t});",
                "err": {},
                "isRoot": false,
                "uuid": "1d733a5f-ca8b-46fa-87d0-395815efdca4",
                "parentUUID": "33139feb-ff90-408d-a6aa-abec2f6266b2",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1132
          },
          {
            "title": "sendActions",
            "suites": [],
            "tests": [
              {
                "title": "sendMessages",
                "fullTitle": "Edge node manager testing sendActions sendMessages",
                "timedOut": false,
                "duration": 43,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/devices/\"+uuid+\"/messages\");\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n\t\t\t\turi: requestURL,\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tjson: {\n\t\t\t\t\t\"data\": {\"alarm\": true }\n\t\t\t\t}\n\t\t\t}, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body);\n                    assert.equal(body.success, true);\n                    done();\t\n\t\t\t});",
                "err": {},
                "isRoot": false,
                "uuid": "5a69d31e-e825-4412-bd3e-03b4d1158d47",
                "parentUUID": "c5bf83a7-dc2e-4d40-bf39-a0c071310618",
                "skipped": false
              },
              {
                "title": "sendActions setOn",
                "fullTitle": "Edge node manager testing sendActions sendActions setOn",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/devices/\"+uuid+\"/messages\");\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n\t\t\t\turi: requestURL,\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tjson: {\n\t\t\t\t\t\"data\": {\"actions\":[{\"name\":\"seton\"}]} \n\t\t\t\t}\n\t\t\t}, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body);\n                     assert.equal(body.success, true);\n                    done();\n\t\t\t\t\n\t\t\t});",
                "err": {},
                "isRoot": false,
                "uuid": "1118098d-f81d-42a4-bb67-3fa0b45391ed",
                "parentUUID": "c5bf83a7-dc2e-4d40-bf39-a0c071310618",
                "skipped": false
              },
              {
                "title": "sendActions SetOff",
                "fullTitle": "Edge node manager testing sendActions sendActions SetOff",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/devices/\"+uuid+\"/messages\");\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n\t\t\t\turi: requestURL,\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tjson: {\n\t\t\t\t\t\"data\": {\"actions\":[{\"name\":\"setoff\"}]} \n\t\t\t\t}\n\t\t\t}, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body);\n                     assert.equal(body.success, true);\n                    done();\n\t\t\t\t\n\t\t\t});",
                "err": {},
                "isRoot": false,
                "uuid": "6a31d357-12a7-4fa8-a214-a8c749b7185d",
                "parentUUID": "c5bf83a7-dc2e-4d40-bf39-a0c071310618",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/enm.js",
            "uuid": "c5bf83a7-dc2e-4d40-bf39-a0c071310618",
            "fullFile": "/root/enm/enm.js",
            "passes": [
              {
                "title": "sendMessages",
                "fullTitle": "Edge node manager testing sendActions sendMessages",
                "timedOut": false,
                "duration": 43,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/devices/\"+uuid+\"/messages\");\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n\t\t\t\turi: requestURL,\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tjson: {\n\t\t\t\t\t\"data\": {\"alarm\": true }\n\t\t\t\t}\n\t\t\t}, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body);\n                    assert.equal(body.success, true);\n                    done();\t\n\t\t\t});",
                "err": {},
                "isRoot": false,
                "uuid": "5a69d31e-e825-4412-bd3e-03b4d1158d47",
                "parentUUID": "c5bf83a7-dc2e-4d40-bf39-a0c071310618",
                "skipped": false
              },
              {
                "title": "sendActions setOn",
                "fullTitle": "Edge node manager testing sendActions sendActions setOn",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/devices/\"+uuid+\"/messages\");\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n\t\t\t\turi: requestURL,\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tjson: {\n\t\t\t\t\t\"data\": {\"actions\":[{\"name\":\"seton\"}]} \n\t\t\t\t}\n\t\t\t}, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body);\n                     assert.equal(body.success, true);\n                    done();\n\t\t\t\t\n\t\t\t});",
                "err": {},
                "isRoot": false,
                "uuid": "1118098d-f81d-42a4-bb67-3fa0b45391ed",
                "parentUUID": "c5bf83a7-dc2e-4d40-bf39-a0c071310618",
                "skipped": false
              },
              {
                "title": "sendActions SetOff",
                "fullTitle": "Edge node manager testing sendActions sendActions SetOff",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/devices/\"+uuid+\"/messages\");\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n\t\t\t\turi: requestURL,\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tjson: {\n\t\t\t\t\t\"data\": {\"actions\":[{\"name\":\"setoff\"}]} \n\t\t\t\t}\n\t\t\t}, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body);\n                     assert.equal(body.success, true);\n                    done();\n\t\t\t\t\n\t\t\t});",
                "err": {},
                "isRoot": false,
                "uuid": "6a31d357-12a7-4fa8-a214-a8c749b7185d",
                "parentUUID": "c5bf83a7-dc2e-4d40-bf39-a0c071310618",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 76
          },
          {
            "title": "deleteDevice",
            "suites": [],
            "tests": [
              {
                "title": "deleteDevice",
                "fullTitle": "Edge node manager testing deleteDevice deleteDevice",
                "timedOut": false,
                "duration": 321,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/service/AKCProvision\");\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n\t\t\t\turi: requestURL,\n\t\t\t\tmethod: \"DELETE\",\n\t\t\t\tjson: {\n\t\t\t\t\t\"uuid\": uuid\n\t\t\t\t}\n\t\t\t}, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body);\n\t\t\t\tassert.equal(body.success, true);\n\t\t\t    done();\n\t\t\t});",
                "err": {},
                "isRoot": false,
                "uuid": "f79c73db-24d2-408f-9412-28b64761111f",
                "parentUUID": "23f26079-8cd1-4747-a348-e7da2ad74dd5",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/enm.js",
            "uuid": "23f26079-8cd1-4747-a348-e7da2ad74dd5",
            "fullFile": "/root/enm/enm.js",
            "passes": [
              {
                "title": "deleteDevice",
                "fullTitle": "Edge node manager testing deleteDevice deleteDevice",
                "timedOut": false,
                "duration": 321,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/service/AKCProvision\");\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n\t\t\t\turi: requestURL,\n\t\t\t\tmethod: \"DELETE\",\n\t\t\t\tjson: {\n\t\t\t\t\t\"uuid\": uuid\n\t\t\t\t}\n\t\t\t}, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body);\n\t\t\t\tassert.equal(body.success, true);\n\t\t\t    done();\n\t\t\t});",
                "err": {},
                "isRoot": false,
                "uuid": "f79c73db-24d2-408f-9412-28b64761111f",
                "parentUUID": "23f26079-8cd1-4747-a348-e7da2ad74dd5",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 321
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/enm.js",
        "uuid": "5b1fc5da-c2a6-4e43-8221-56f4ee342d31",
        "fullFile": "/root/enm/enm.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "c69ed302-c08d-45b4-955d-f7d2fee2c11f",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "userid and token should set",
      "fullTitle": "Set Configuration userid and token should set",
      "timedOut": false,
      "duration": 335,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var requestURL = createUrlFor(\"/service/conf\");\nconsole.log(\"URL = \"+requestURL);\nrequest({\n  uri: requestURL,\n  method: \"PUT\",\n  json: {\n\t\"token\": token,\n\t\"user_id\":userid\n  }\n}, function(error, response, body) {\n  console.log(body);\n  assert.isNotNull(body);\n  assert.equal(body.success, true);\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "fe2fb003-3e10-4070-9f0a-624f15586dca",
      "parentUUID": "62c5b87d-491c-4f10-9c9b-4ed219431580",
      "skipped": false
    },
    {
      "title": "userid and token should get and compare with set values",
      "fullTitle": "Get Configuration userid and token should get and compare with set values",
      "timedOut": false,
      "duration": 64,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var requestURL = createUrlFor(\"/service/conf\");\nconsole.log(\"URL = \"+requestURL);\nrequest({\n  uri: requestURL,\n  method: \"GET\"\n}, function(error, response, body) {\n\tconsole.log(body);\n\tvar response = JSON.parse(body);\n\tassert.equal(response.user_id , userid);\n\tassert.equal(response.token , token);\n\tdone();\n\t\n});",
      "err": {},
      "isRoot": false,
      "uuid": "9a8a5bcb-6fd9-4efc-99b3-53e97dadcd6a",
      "parentUUID": "90fc9581-0523-4bfe-94c7-d1f65a9fd66b",
      "skipped": false
    },
    {
      "title": "Set discovery to true",
      "fullTitle": "Set Discovery Set discovery to true",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var requestURL = createUrlFor(\"/service\");\nconsole.log(\"URL = \"+requestURL);\nrequest({\n  uri: requestURL,\n  method: \"PUT\",\n  json: {\n\t\"DiscoveryStarted\": true\n  }\n}, function(error, response, body) {\n\tconsole.log(body);\n\tassert.equal(body.discoverystarted , true);\n\tdone();  \n});",
      "err": {},
      "isRoot": false,
      "uuid": "4344e612-f75c-4aa2-b580-92120931835f",
      "parentUUID": "fe1a595c-5ef9-4b4a-8fdf-331fefd96a15",
      "skipped": false
    },
    {
      "title": "Get discovery",
      "fullTitle": "Get Discovery Get discovery",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var requestURL = createUrlFor(\"/service\");\nconsole.log(\"URL = \"+requestURL);\nrequest({\n  uri: requestURL,\n  method: \"GET\"\n}, function(error, response, body) {\n\tvar json=JSON.parse(body);\n \t\t\t\tassert.equal(json.discoverystarted,true);\n\tdone();  \n});",
      "err": {},
      "isRoot": false,
      "uuid": "72c478d7-94f3-46db-bdc3-69b45e971ecd",
      "parentUUID": "41d6bbbe-ce80-49dd-ada9-b4188f680fbc",
      "skipped": false
    },
    {
      "title": "Get all edge node devices and check is there are any A0 family",
      "fullTitle": "Get all edge node devices Get all edge node devices and check is there are any A0 family",
      "timedOut": false,
      "duration": 44,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var requestURL = createUrlFor(\"/devices\");\nconsole.log(\"URL = \"+requestURL);\nrequest({\n  uri: requestURL,\n  method: \"GET\"\n}, function(error, response, body) {\n\tbody = JSON.parse(body);\n\tconsole.log(body);\t\t\t\t\n\t\n\tassert.isNotNull(body);\n\tfor(var i=0;i< body.length;i++)\n\t{\n\t\tvar device = body[i];\n\t\tconsole.log(\"\\n device \"+i+\" details = \"+ JSON.stringify(device));\t\t\t\t\t\n\t\tif(device.hardware.modelnum == model_number && device.status.state == \"Online\"){\n\t\t\tonlineDeviceList[i] = device;\n\t\t}\n\t}\n\tassert.equal(onlineDeviceList.length>0, true);\n\tdone();\t\n});",
      "err": {},
      "isRoot": false,
      "uuid": "a5d2eeda-e482-435f-93b8-7c9f18e80e7b",
      "parentUUID": "50f10bfe-5f30-47b8-9bc6-8eb71324012b",
      "skipped": false
    },
    {
      "title": "getFirmwareVersionForUUID",
      "fullTitle": "getFirmwareVersionForUUID getFirmwareVersionForUUID",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/devices\");\n\t\t    requestURL = requestURL +\"/\"+ uuid + \"/firmware\"\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n              uri: requestURL,\n              method: \"GET\"\n            }, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body); \n                    done();\n            });",
      "err": {},
      "isRoot": false,
      "uuid": "036f5df6-6b79-48df-a8ce-3a9285fc8836",
      "parentUUID": "dd863263-7eed-4cbd-8326-de93f6ac7a61",
      "skipped": false
    },
    {
      "title": "registerDevice",
      "fullTitle": "registerDevice registerDevice",
      "timedOut": true,
      "duration": 2009,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "console.log(\"name = \"+name);\nconsole.log(\"uuid = \"+uuid);\nvar requestURL = createUrlFor(\"/service/AKCProvision\");\nconsole.log(\"URL = \"+requestURL);\nrequest({\n\t            uri: requestURL,\n\tmethod: \"POST\",\n\t            json: {\n\t\t\"uuid\": uuid,\n\t\t\"dtid\": dtid,\n\t\t\"name\": name\n\t}\n\t                \n\t            }, function(error, response, body) {\n\t\tconsole.log(body);\n\t\tassert.isNotNull(body);\n\t    assert.equal(body.success, true);\n\t    done();\n    });",
      "err": {
        "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves."
      },
      "isRoot": false,
      "uuid": "28c274d4-3e41-4b09-a579-0010d9d9f33a",
      "parentUUID": "e6153551-6c6f-4816-abb2-5d019dd99ed1",
      "skipped": false
    },
    {
      "title": "sendMessages",
      "fullTitle": "sendMessages sendMessages",
      "timedOut": true,
      "duration": 2002,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/devices/\"+uuid);\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n\t\t\t\turi: requestURL,\n\t\t\t\tmethod: \"PUT\",\n\t\t\t\tjson: {\n\t\t\t\t\t \"reboot\": true\n\t\t\t\t}\n\t\t\t}, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body);\n                    assert.equal(body.success, true);\n                    done();\n\t\t\t\t\n\t\t\t});",
      "err": {
        "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves."
      },
      "isRoot": false,
      "uuid": "ba0f7724-722b-47ec-88cb-1231b5ed1c7c",
      "parentUUID": "a8867769-23cc-4726-87dc-cace66a69fb6",
      "skipped": false
    },
    {
      "title": "sendMessages",
      "fullTitle": "sendMessages sendMessages",
      "timedOut": false,
      "duration": 1132,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/devices/\"+uuid+\"/messages\");\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n\t\t\t\turi: requestURL,\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tjson: {\n\t\t\t\t\t\"data\": {\"reboot\": true }\n\t\t\t\t}\n\t\t\t}, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body);\n                    assert.equal(body.success, true);\n                    done();\t\n\t\t\t});",
      "err": {},
      "isRoot": false,
      "uuid": "1d733a5f-ca8b-46fa-87d0-395815efdca4",
      "parentUUID": "33139feb-ff90-408d-a6aa-abec2f6266b2",
      "skipped": false
    },
    {
      "title": "sendMessages",
      "fullTitle": "sendActions sendMessages",
      "timedOut": false,
      "duration": 43,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/devices/\"+uuid+\"/messages\");\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n\t\t\t\turi: requestURL,\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tjson: {\n\t\t\t\t\t\"data\": {\"alarm\": true }\n\t\t\t\t}\n\t\t\t}, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body);\n                    assert.equal(body.success, true);\n                    done();\t\n\t\t\t});",
      "err": {},
      "isRoot": false,
      "uuid": "5a69d31e-e825-4412-bd3e-03b4d1158d47",
      "parentUUID": "c5bf83a7-dc2e-4d40-bf39-a0c071310618",
      "skipped": false
    },
    {
      "title": "sendActions setOn",
      "fullTitle": "sendActions sendActions setOn",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/devices/\"+uuid+\"/messages\");\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n\t\t\t\turi: requestURL,\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tjson: {\n\t\t\t\t\t\"data\": {\"actions\":[{\"name\":\"seton\"}]} \n\t\t\t\t}\n\t\t\t}, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body);\n                     assert.equal(body.success, true);\n                    done();\n\t\t\t\t\n\t\t\t});",
      "err": {},
      "isRoot": false,
      "uuid": "1118098d-f81d-42a4-bb67-3fa0b45391ed",
      "parentUUID": "c5bf83a7-dc2e-4d40-bf39-a0c071310618",
      "skipped": false
    },
    {
      "title": "sendActions SetOff",
      "fullTitle": "sendActions sendActions SetOff",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/devices/\"+uuid+\"/messages\");\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n\t\t\t\turi: requestURL,\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tjson: {\n\t\t\t\t\t\"data\": {\"actions\":[{\"name\":\"setoff\"}]} \n\t\t\t\t}\n\t\t\t}, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body);\n                     assert.equal(body.success, true);\n                    done();\n\t\t\t\t\n\t\t\t});",
      "err": {},
      "isRoot": false,
      "uuid": "6a31d357-12a7-4fa8-a214-a8c749b7185d",
      "parentUUID": "c5bf83a7-dc2e-4d40-bf39-a0c071310618",
      "skipped": false
    },
    {
      "title": "deleteDevice",
      "fullTitle": "deleteDevice deleteDevice",
      "timedOut": false,
      "duration": 321,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/service/AKCProvision\");\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n\t\t\t\turi: requestURL,\n\t\t\t\tmethod: \"DELETE\",\n\t\t\t\tjson: {\n\t\t\t\t\t\"uuid\": uuid\n\t\t\t\t}\n\t\t\t}, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body);\n\t\t\t\tassert.equal(body.success, true);\n\t\t\t    done();\n\t\t\t});",
      "err": {},
      "isRoot": false,
      "uuid": "f79c73db-24d2-408f-9412-28b64761111f",
      "parentUUID": "23f26079-8cd1-4747-a348-e7da2ad74dd5",
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "userid and token should set",
      "fullTitle": "Set Configuration userid and token should set",
      "timedOut": false,
      "duration": 335,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var requestURL = createUrlFor(\"/service/conf\");\nconsole.log(\"URL = \"+requestURL);\nrequest({\n  uri: requestURL,\n  method: \"PUT\",\n  json: {\n\t\"token\": token,\n\t\"user_id\":userid\n  }\n}, function(error, response, body) {\n  console.log(body);\n  assert.isNotNull(body);\n  assert.equal(body.success, true);\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "fe2fb003-3e10-4070-9f0a-624f15586dca",
      "parentUUID": "62c5b87d-491c-4f10-9c9b-4ed219431580",
      "skipped": false
    },
    {
      "title": "userid and token should get and compare with set values",
      "fullTitle": "Get Configuration userid and token should get and compare with set values",
      "timedOut": false,
      "duration": 64,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var requestURL = createUrlFor(\"/service/conf\");\nconsole.log(\"URL = \"+requestURL);\nrequest({\n  uri: requestURL,\n  method: \"GET\"\n}, function(error, response, body) {\n\tconsole.log(body);\n\tvar response = JSON.parse(body);\n\tassert.equal(response.user_id , userid);\n\tassert.equal(response.token , token);\n\tdone();\n\t\n});",
      "err": {},
      "isRoot": false,
      "uuid": "9a8a5bcb-6fd9-4efc-99b3-53e97dadcd6a",
      "parentUUID": "90fc9581-0523-4bfe-94c7-d1f65a9fd66b",
      "skipped": false
    },
    {
      "title": "Set discovery to true",
      "fullTitle": "Set Discovery Set discovery to true",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var requestURL = createUrlFor(\"/service\");\nconsole.log(\"URL = \"+requestURL);\nrequest({\n  uri: requestURL,\n  method: \"PUT\",\n  json: {\n\t\"DiscoveryStarted\": true\n  }\n}, function(error, response, body) {\n\tconsole.log(body);\n\tassert.equal(body.discoverystarted , true);\n\tdone();  \n});",
      "err": {},
      "isRoot": false,
      "uuid": "4344e612-f75c-4aa2-b580-92120931835f",
      "parentUUID": "fe1a595c-5ef9-4b4a-8fdf-331fefd96a15",
      "skipped": false
    },
    {
      "title": "Get discovery",
      "fullTitle": "Get Discovery Get discovery",
      "timedOut": false,
      "duration": 18,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var requestURL = createUrlFor(\"/service\");\nconsole.log(\"URL = \"+requestURL);\nrequest({\n  uri: requestURL,\n  method: \"GET\"\n}, function(error, response, body) {\n\tvar json=JSON.parse(body);\n \t\t\t\tassert.equal(json.discoverystarted,true);\n\tdone();  \n});",
      "err": {},
      "isRoot": false,
      "uuid": "72c478d7-94f3-46db-bdc3-69b45e971ecd",
      "parentUUID": "41d6bbbe-ce80-49dd-ada9-b4188f680fbc",
      "skipped": false
    },
    {
      "title": "Get all edge node devices and check is there are any A0 family",
      "fullTitle": "Get all edge node devices Get all edge node devices and check is there are any A0 family",
      "timedOut": false,
      "duration": 44,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var requestURL = createUrlFor(\"/devices\");\nconsole.log(\"URL = \"+requestURL);\nrequest({\n  uri: requestURL,\n  method: \"GET\"\n}, function(error, response, body) {\n\tbody = JSON.parse(body);\n\tconsole.log(body);\t\t\t\t\n\t\n\tassert.isNotNull(body);\n\tfor(var i=0;i< body.length;i++)\n\t{\n\t\tvar device = body[i];\n\t\tconsole.log(\"\\n device \"+i+\" details = \"+ JSON.stringify(device));\t\t\t\t\t\n\t\tif(device.hardware.modelnum == model_number && device.status.state == \"Online\"){\n\t\t\tonlineDeviceList[i] = device;\n\t\t}\n\t}\n\tassert.equal(onlineDeviceList.length>0, true);\n\tdone();\t\n});",
      "err": {},
      "isRoot": false,
      "uuid": "a5d2eeda-e482-435f-93b8-7c9f18e80e7b",
      "parentUUID": "50f10bfe-5f30-47b8-9bc6-8eb71324012b",
      "skipped": false
    },
    {
      "title": "getFirmwareVersionForUUID",
      "fullTitle": "getFirmwareVersionForUUID getFirmwareVersionForUUID",
      "timedOut": false,
      "duration": 20,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/devices\");\n\t\t    requestURL = requestURL +\"/\"+ uuid + \"/firmware\"\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n              uri: requestURL,\n              method: \"GET\"\n            }, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body); \n                    done();\n            });",
      "err": {},
      "isRoot": false,
      "uuid": "036f5df6-6b79-48df-a8ce-3a9285fc8836",
      "parentUUID": "dd863263-7eed-4cbd-8326-de93f6ac7a61",
      "skipped": false
    },
    {
      "title": "sendMessages",
      "fullTitle": "sendMessages sendMessages",
      "timedOut": false,
      "duration": 1132,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/devices/\"+uuid+\"/messages\");\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n\t\t\t\turi: requestURL,\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tjson: {\n\t\t\t\t\t\"data\": {\"reboot\": true }\n\t\t\t\t}\n\t\t\t}, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body);\n                    assert.equal(body.success, true);\n                    done();\t\n\t\t\t});",
      "err": {},
      "isRoot": false,
      "uuid": "1d733a5f-ca8b-46fa-87d0-395815efdca4",
      "parentUUID": "33139feb-ff90-408d-a6aa-abec2f6266b2",
      "skipped": false
    },
    {
      "title": "sendMessages",
      "fullTitle": "sendActions sendMessages",
      "timedOut": false,
      "duration": 43,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/devices/\"+uuid+\"/messages\");\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n\t\t\t\turi: requestURL,\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tjson: {\n\t\t\t\t\t\"data\": {\"alarm\": true }\n\t\t\t\t}\n\t\t\t}, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body);\n                    assert.equal(body.success, true);\n                    done();\t\n\t\t\t});",
      "err": {},
      "isRoot": false,
      "uuid": "5a69d31e-e825-4412-bd3e-03b4d1158d47",
      "parentUUID": "c5bf83a7-dc2e-4d40-bf39-a0c071310618",
      "skipped": false
    },
    {
      "title": "sendActions setOn",
      "fullTitle": "sendActions sendActions setOn",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/devices/\"+uuid+\"/messages\");\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n\t\t\t\turi: requestURL,\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tjson: {\n\t\t\t\t\t\"data\": {\"actions\":[{\"name\":\"seton\"}]} \n\t\t\t\t}\n\t\t\t}, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body);\n                     assert.equal(body.success, true);\n                    done();\n\t\t\t\t\n\t\t\t});",
      "err": {},
      "isRoot": false,
      "uuid": "1118098d-f81d-42a4-bb67-3fa0b45391ed",
      "parentUUID": "c5bf83a7-dc2e-4d40-bf39-a0c071310618",
      "skipped": false
    },
    {
      "title": "sendActions SetOff",
      "fullTitle": "sendActions sendActions SetOff",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/devices/\"+uuid+\"/messages\");\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n\t\t\t\turi: requestURL,\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tjson: {\n\t\t\t\t\t\"data\": {\"actions\":[{\"name\":\"setoff\"}]} \n\t\t\t\t}\n\t\t\t}, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body);\n                     assert.equal(body.success, true);\n                    done();\n\t\t\t\t\n\t\t\t});",
      "err": {},
      "isRoot": false,
      "uuid": "6a31d357-12a7-4fa8-a214-a8c749b7185d",
      "parentUUID": "c5bf83a7-dc2e-4d40-bf39-a0c071310618",
      "skipped": false
    },
    {
      "title": "deleteDevice",
      "fullTitle": "deleteDevice deleteDevice",
      "timedOut": false,
      "duration": 321,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/service/AKCProvision\");\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n\t\t\t\turi: requestURL,\n\t\t\t\tmethod: \"DELETE\",\n\t\t\t\tjson: {\n\t\t\t\t\t\"uuid\": uuid\n\t\t\t\t}\n\t\t\t}, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body);\n\t\t\t\tassert.equal(body.success, true);\n\t\t\t    done();\n\t\t\t});",
      "err": {},
      "isRoot": false,
      "uuid": "f79c73db-24d2-408f-9412-28b64761111f",
      "parentUUID": "23f26079-8cd1-4747-a348-e7da2ad74dd5",
      "skipped": false
    }
  ],
  "allFailures": [
    {
      "title": "registerDevice",
      "fullTitle": "registerDevice registerDevice",
      "timedOut": true,
      "duration": 2009,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "console.log(\"name = \"+name);\nconsole.log(\"uuid = \"+uuid);\nvar requestURL = createUrlFor(\"/service/AKCProvision\");\nconsole.log(\"URL = \"+requestURL);\nrequest({\n\t            uri: requestURL,\n\tmethod: \"POST\",\n\t            json: {\n\t\t\"uuid\": uuid,\n\t\t\"dtid\": dtid,\n\t\t\"name\": name\n\t}\n\t                \n\t            }, function(error, response, body) {\n\t\tconsole.log(body);\n\t\tassert.isNotNull(body);\n\t    assert.equal(body.success, true);\n\t    done();\n    });",
      "err": {
        "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves."
      },
      "isRoot": false,
      "uuid": "28c274d4-3e41-4b09-a579-0010d9d9f33a",
      "parentUUID": "e6153551-6c6f-4816-abb2-5d019dd99ed1",
      "skipped": false
    },
    {
      "title": "sendMessages",
      "fullTitle": "sendMessages sendMessages",
      "timedOut": true,
      "duration": 2002,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "console.log(\"uuid = \"+uuid);\n\t\tvar requestURL = createUrlFor(\"/devices/\"+uuid);\n\t\tconsole.log(\"URL = \"+requestURL);\n\t\t\trequest({\n\t\t\t\turi: requestURL,\n\t\t\t\tmethod: \"PUT\",\n\t\t\t\tjson: {\n\t\t\t\t\t \"reboot\": true\n\t\t\t\t}\n\t\t\t}, function(error, response, body) {\n\t\t\t\tconsole.log(body);\n\t\t\t\tassert.isNotNull(body);\n                    assert.equal(body.success, true);\n                    done();\n\t\t\t\t\n\t\t\t});",
      "err": {
        "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves."
      },
      "isRoot": false,
      "uuid": "ba0f7724-722b-47ec-88cb-1231b5ed1c7c",
      "parentUUID": "a8867769-23cc-4726-87dc-cace66a69fb6",
      "skipped": false
    }
  ],
  "copyrightYear": 2017
}